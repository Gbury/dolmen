; File auto-generated by gentests.ml

; Auto-generated part begin
; Test for DelayedArbiter.mcil
; Incremental test

(rule
   (target  DelayedArbiter.incremental)
   (deps    (:input DelayedArbiter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DelayedArbiter.expected DelayedArbiter.incremental)))

; Full mode test

(rule
   (target  DelayedArbiter.full)
   (deps    (:input DelayedArbiter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DelayedArbiter.expected DelayedArbiter.full)))


; Test for DoubleDelay1.mcil
; Incremental test

(rule
   (target  DoubleDelay1.incremental)
   (deps    (:input DoubleDelay1.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DoubleDelay1.expected DoubleDelay1.incremental)))

; Full mode test

(rule
   (target  DoubleDelay1.full)
   (deps    (:input DoubleDelay1.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DoubleDelay1.expected DoubleDelay1.full)))


; Test for DoubleDelay2.mcil
; Incremental test

(rule
   (target  DoubleDelay2.incremental)
   (deps    (:input DoubleDelay2.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DoubleDelay2.expected DoubleDelay2.incremental)))

; Full mode test

(rule
   (target  DoubleDelay2.full)
   (deps    (:input DoubleDelay2.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff DoubleDelay2.expected DoubleDelay2.full)))


; Test for Monitor.mcil
; Incremental test

(rule
   (target  Monitor.incremental)
   (deps    (:input Monitor.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff Monitor.expected Monitor.incremental)))

; Full mode test

(rule
   (target  Monitor.full)
   (deps    (:input Monitor.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff Monitor.expected Monitor.full)))


; Test for NonDetArbiter.mcil
; Incremental test

(rule
   (target  NonDetArbiter.incremental)
   (deps    (:input NonDetArbiter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff NonDetArbiter.expected NonDetArbiter.incremental)))

; Full mode test

(rule
   (target  NonDetArbiter.full)
   (deps    (:input NonDetArbiter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff NonDetArbiter.expected NonDetArbiter.full)))


; Test for SmallSystems.mcil
; Incremental test

(rule
   (target  SmallSystems.incremental)
   (deps    (:input SmallSystems.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff SmallSystems.expected SmallSystems.incremental)))

; Full mode test

(rule
   (target  SmallSystems.full)
   (deps    (:input SmallSystems.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff SmallSystems.expected SmallSystems.full)))


; Test for StutteringClockedCopy.mcil
; Incremental test

(rule
   (target  StutteringClockedCopy.incremental)
   (deps    (:input StutteringClockedCopy.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff StutteringClockedCopy.expected StutteringClockedCopy.incremental)))

; Full mode test

(rule
   (target  StutteringClockedCopy.full)
   (deps    (:input StutteringClockedCopy.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff StutteringClockedCopy.expected StutteringClockedCopy.full)))


; Test for ThreeBitCounter.mcil
; Incremental test

(rule
   (target  ThreeBitCounter.incremental)
   (deps    (:input ThreeBitCounter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff ThreeBitCounter.expected ThreeBitCounter.incremental)))

; Full mode test

(rule
   (target  ThreeBitCounter.full)
   (deps    (:input ThreeBitCounter.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff ThreeBitCounter.expected ThreeBitCounter.full)))


; Test for TrafficLight1.mcil
; Incremental test

(rule
   (target  TrafficLight1.incremental)
   (deps    (:input TrafficLight1.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff TrafficLight1.expected TrafficLight1.incremental)))

; Full mode test

(rule
   (target  TrafficLight1.full)
   (deps    (:input TrafficLight1.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff TrafficLight1.expected TrafficLight1.full)))


; Test for TrafficLight3.mcil
; Incremental test

(rule
   (target  TrafficLight3.incremental)
   (deps    (:input TrafficLight3.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=incremental --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff TrafficLight3.expected TrafficLight3.incremental)))

; Full mode test

(rule
   (target  TrafficLight3.full)
   (deps    (:input TrafficLight3.mcil))
   (package dolmen_bin)
   (action (chdir %{workspace_root}
            (with-outputs-to %{target}
             (with-accepted-exit-codes (or 0 (not 0))
              (run dolmen --mode=full --color=never %{input} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (package dolmen_bin)
  (action (diff TrafficLight3.expected TrafficLight3.full)))


; Auto-generated part end
