{1 Dolmen}

{2 License}

This code is free, under the BSD license.

{2 Contents}

Dolmen is a parser library, intended to considerably reduce the burden of having
to parse different input languages. The main idea of dolmen
is to provide an easy way to obtain a structured representation
of an input, but not to completely abstract over the different input languages.
Indeed, most languages are different enough that completeley abstracting over many
of them would require specific encodings that would be detrimental to keeping
the original structure of the input. Instead, the idea is to identify the
core requirements of each language and provide easy way to obtain parsers
for these languages when provided with an implementation that meets the requirements.

To that effect, dolmen mainly provides functors that take an adequate implementation
of terms and top-level directives, and then return parsers for various languages.

{4 Language classes}

Some languages have enough similarities in either synatx or purpose to be packed
into classes. Currently, the only class available is the {!Logic} class that regroup
languages used in formal proof.

{!modules:
Logic
}

The following modules synthesize the implementation requirements for language classes:

{!modules:
Id_intf
Term_intf
Stmt_intf
Location_intf
}

{4 Standard implementations}

The following modules define standard implementations that can be used to directly
instantiate the parser functors.

{!modules:
Id
Term
Normalize
Statement
ParseLocation
}

{4 Language parsers}

Individual language parsers are available through the following modules:

{!modules:
Dimacs
ICNF
Smtlib
Tptp
Zf
}

These parsers all create modules with the following interface:

 {!modules:
 Language_intf
 }

{2 Index}

{!indexlist}
