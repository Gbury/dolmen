input: XOR
##
## Ends in an error in state: 362.
##
## input' -> . input [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: AXIOM ID COLON VOID WITH
##
## Ends in an error in state: 356.
##
## decl -> AXIOM decl_ident COLON lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident COLON lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: AXIOM ID COLON XOR
##
## Ends in an error in state: 355.
##
## decl -> AXIOM decl_ident COLON . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: AXIOM ID XOR
##
## Ends in an error in state: 354.
##
## decl -> AXIOM decl_ident . COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: AXIOM XOR
##
## Ends in an error in state: 353.
##
## decl -> AXIOM . decl_ident COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID EQUAL
##
## Ends in an error in state: 345.
##
## decl -> FUNC raw_named_ident . LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production raw_named_ident -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR RIGHTPAR COLON UNIT EQUAL VOID WITH
##
## Ends in an error in state: 352.
##
## decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR RIGHTPAR COLON UNIT EQUAL XOR
##
## Ends in an error in state: 351.
##
## decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR RIGHTPAR COLON UNIT XOR
##
## Ends in an error in state: 350.
##
## decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## primitive_type -> primitive_type . ident [ ID EQUAL ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR RIGHTPAR COLON XOR
##
## Ends in an error in state: 349.
##
## decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON . primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR RIGHTPAR XOR
##
## Ends in an error in state: 348.
##
## decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR . COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC ID LEFTPAR XOR
##
## Ends in an error in state: 346.
##
## decl -> FUNC raw_named_ident LEFTPAR . loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC raw_named_ident LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: FUNC XOR
##
## Ends in an error in state: 344.
##
## decl -> FUNC . raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: GOAL ID COLON VOID WITH
##
## Ends in an error in state: 343.
##
## decl -> GOAL decl_ident COLON lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## GOAL decl_ident COLON lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: GOAL ID COLON XOR
##
## Ends in an error in state: 342.
##
## decl -> GOAL decl_ident COLON . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## GOAL decl_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: GOAL ID XOR
##
## Ends in an error in state: 341.
##
## decl -> GOAL decl_ident . COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## GOAL decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: GOAL XOR
##
## Ends in an error in state: 340.
##
## decl -> GOAL . decl_ident COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## GOAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC AC XOR
##
## Ends in an error in state: 325.
##
## decl -> LOGIC ac_modifier . separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## LOGIC ac_modifier
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON BITV LEFTSQ INTEGER XOR
##
## Ends in an error in state: 29.
##
## primitive_type -> BITV LEFTSQ INTEGER . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## BITV LEFTSQ INTEGER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON BITV LEFTSQ XOR
##
## Ends in an error in state: 28.
##
## primitive_type -> BITV LEFTSQ . INTEGER RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## BITV LEFTSQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON BITV XOR
##
## Ends in an error in state: 27.
##
## primitive_type -> BITV . LEFTSQ INTEGER RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## BITV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON LEFTPAR UNIT RIGHTARROW
##
## Ends in an error in state: 32.
##
## primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) . RIGHTPAR ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTPAR separated_nonempty_list(COMMA,primitive_type)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production separated_nonempty_list(COMMA,primitive_type) -> primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON LEFTPAR UNIT RIGHTPAR XOR
##
## Ends in an error in state: 33.
##
## primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR . ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON LEFTPAR UNIT XOR
##
## Ends in an error in state: 36.
##
## primitive_type -> primitive_type . ident [ RIGHTPAR RIGHTARROW ID COMMA ]
## separated_nonempty_list(COMMA,primitive_type) -> primitive_type . [ RIGHTPAR RIGHTARROW ]
## separated_nonempty_list(COMMA,primitive_type) -> primitive_type . COMMA separated_nonempty_list(COMMA,primitive_type) [ RIGHTPAR RIGHTARROW ]
##
## The known suffix of the stack is as follows:
## primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON LEFTPAR XOR
##
## Ends in an error in state: 24.
##
## primitive_type -> LEFTPAR . separated_nonempty_list(COMMA,primitive_type) RIGHTPAR ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON PROP XOR
##
## Ends in an error in state: 360.
##
## list(decl) -> decl . list(decl) [ EOF ]
##
## The known suffix of the stack is as follows:
## decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON RIGHTARROW UNIT XOR
##
## Ends in an error in state: 335.
##
## primitive_type -> primitive_type . ident [ TYPE THEORY REWRITING PRED LOGIC ID GOAL FUNC EOF AXIOM ]
## primitive_type_or_prop -> primitive_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON RIGHTARROW XOR
##
## Ends in an error in state: 333.
##
## logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW . primitive_type_or_prop [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON UNIT COMMA BOOL RIGHTPAR
##
## Ends in an error in state: 332.
##
## logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) . RIGHTARROW primitive_type_or_prop [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(COMMA,primitive_type))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 36, spurious reduction of production separated_nonempty_list(COMMA,primitive_type) -> primitive_type
## In state 38, spurious reduction of production separated_nonempty_list(COMMA,primitive_type) -> primitive_type COMMA separated_nonempty_list(COMMA,primitive_type)
## In state 329, spurious reduction of production loption(separated_nonempty_list(COMMA,primitive_type)) -> separated_nonempty_list(COMMA,primitive_type)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON UNIT COMMA XOR
##
## Ends in an error in state: 37.
##
## separated_nonempty_list(COMMA,primitive_type) -> primitive_type COMMA . separated_nonempty_list(COMMA,primitive_type) [ RIGHTPAR RIGHTARROW ]
##
## The known suffix of the stack is as follows:
## primitive_type COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON UNIT XOR
##
## Ends in an error in state: 331.
##
## primitive_type -> primitive_type . ident [ TYPE THEORY RIGHTARROW REWRITING PRED LOGIC ID GOAL FUNC EOF COMMA AXIOM ]
## primitive_type_or_prop -> primitive_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## separated_nonempty_list(COMMA,primitive_type) -> primitive_type . [ RIGHTARROW ]
## separated_nonempty_list(COMMA,primitive_type) -> primitive_type . COMMA separated_nonempty_list(COMMA,primitive_type) [ RIGHTARROW ]
##
## The known suffix of the stack is as follows:
## primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COLON XOR
##
## Ends in an error in state: 327.
##
## decl -> LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON . logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID COMMA XOR
##
## Ends in an error in state: 338.
##
## separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident COMMA . separated_nonempty_list(COMMA,raw_named_ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## raw_named_ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC ID LEFTPAR
##
## Ends in an error in state: 337.
##
## separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident . [ COLON ]
## separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident . COMMA separated_nonempty_list(COMMA,raw_named_ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## raw_named_ident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production raw_named_ident -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: LOGIC XOR
##
## Ends in an error in state: 323.
##
## decl -> LOGIC . ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## LOGIC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID COMMA
##
## Ends in an error in state: 308.
##
## decl -> PRED raw_named_ident . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> PRED raw_named_ident . LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production raw_named_ident -> ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID EQUAL VOID WITH
##
## Ends in an error in state: 322.
##
## decl -> PRED raw_named_ident EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident EQUAL lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID EQUAL XOR
##
## Ends in an error in state: 321.
##
## decl -> PRED raw_named_ident EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR ID COLON BOOL COMMA XOR
##
## Ends in an error in state: 316.
##
## separated_nonempty_list(COMMA,logic_binder) -> logic_binder COMMA . separated_nonempty_list(COMMA,logic_binder) [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## logic_binder COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR ID COLON UNIT XOR
##
## Ends in an error in state: 320.
##
## logic_binder -> ident COLON primitive_type . [ RIGHTPAR COMMA ]
## primitive_type -> primitive_type . ident [ RIGHTPAR ID COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR ID COLON XOR
##
## Ends in an error in state: 319.
##
## logic_binder -> ident COLON . primitive_type [ RIGHTPAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR ID XOR
##
## Ends in an error in state: 318.
##
## logic_binder -> ident . COLON primitive_type [ RIGHTPAR COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR RIGHTPAR EQUAL VOID WITH
##
## Ends in an error in state: 314.
##
## decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR RIGHTPAR EQUAL XOR
##
## Ends in an error in state: 313.
##
## decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR RIGHTPAR XOR
##
## Ends in an error in state: 312.
##
## decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID LEFTPAR XOR
##
## Ends in an error in state: 309.
##
## decl -> PRED raw_named_ident LEFTPAR . loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED raw_named_ident LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED ID XOR
##
## Ends in an error in state: 108.
##
## raw_named_ident -> ID . [ LEFTPAR EQUAL COMMA COLON ]
## raw_named_ident -> ID . STRING [ LEFTPAR EQUAL COMMA COLON ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: PRED XOR
##
## Ends in an error in state: 307.
##
## decl -> PRED . raw_named_ident EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> PRED . raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## PRED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON CHECK XOR
##
## Ends in an error in state: 122.
##
## lexpr -> CHECK . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## CHECK
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON CUT XOR
##
## Ends in an error in state: 121.
##
## lexpr -> CUT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## CUT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON DISTINCT LEFTPAR VOID COMMA VOID WITH
##
## Ends in an error in state: 203.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## list2_lexpr_sep_comma -> lexpr . COMMA lexpr [ RIGHTPAR ]
## list2_lexpr_sep_comma -> lexpr COMMA lexpr . [ RIGHTPAR ]
## list2_lexpr_sep_comma -> lexpr . COMMA list2_lexpr_sep_comma [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## lexpr COMMA lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON DISTINCT LEFTPAR VOID COMMA XOR
##
## Ends in an error in state: 201.
##
## list2_lexpr_sep_comma -> lexpr COMMA . lexpr [ RIGHTPAR ]
## list2_lexpr_sep_comma -> lexpr COMMA . list2_lexpr_sep_comma [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## lexpr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON DISTINCT LEFTPAR VOID WITH
##
## Ends in an error in state: 200.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## list2_lexpr_sep_comma -> lexpr . COMMA lexpr [ RIGHTPAR ]
## list2_lexpr_sep_comma -> lexpr . COMMA list2_lexpr_sep_comma [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON DISTINCT LEFTPAR XOR
##
## Ends in an error in state: 120.
##
## lexpr -> DISTINCT LEFTPAR . list2_lexpr_sep_comma RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## DISTINCT LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON DISTINCT XOR
##
## Ends in an error in state: 119.
##
## lexpr -> DISTINCT . LEFTPAR list2_lexpr_sep_comma RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## DISTINCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON EXISTS ID COLON BOOL DOT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 208.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON EXISTS ID COLON BOOL DOT XOR
##
## Ends in an error in state: 207.
##
## lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON EXISTS ID COLON BOOL LEFTBR VOID RIGHTBR DISTINCT
##
## Ends in an error in state: 206.
##
## lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters . DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON EXISTS ID COLON BOOL LEFTSQ DECIMAL RIGHTSQ DISTINCT
##
## Ends in an error in state: 117.
##
## lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers . filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON EXISTS XOR
##
## Ends in an error in state: 115.
##
## lexpr -> EXISTS . separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## EXISTS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL COMMA XOR
##
## Ends in an error in state: 214.
##
## separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder COMMA . separated_nonempty_list(COMMA,multi_logic_binder) [ LEFTSQ LEFTBR DOT ]
##
## The known suffix of the stack is as follows:
## multi_logic_binder COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL DOT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 250.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL DOT XOR
##
## Ends in an error in state: 249.
##
## lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTBR DECIMAL RIGHTBR DISTINCT
##
## Ends in an error in state: 248.
##
## lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters . DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTBR VOID RIGHTPAR
##
## Ends in an error in state: 204.
##
## filters -> LEFTBR separated_nonempty_list(COMMA,lexpr) . RIGHTBR [ DOT ]
##
## The known suffix of the stack is as follows:
## LEFTBR separated_nonempty_list(COMMA,lexpr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
## In state 148, spurious reduction of production separated_nonempty_list(COMMA,lexpr) -> lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTBR XOR
##
## Ends in an error in state: 118.
##
## filters -> LEFTBR . separated_nonempty_list(COMMA,lexpr) RIGHTBR [ DOT ]
##
## The known suffix of the stack is as follows:
## LEFTBR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ ID MAPS_TO VOID WITH
##
## Ends in an error in state: 222.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr_or_dom -> raw_ident MAPS_TO lexpr . [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## raw_ident MAPS_TO lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ ID MAPS_TO XOR
##
## Ends in an error in state: 221.
##
## lexpr_or_dom -> raw_ident MAPS_TO . lexpr [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## raw_ident MAPS_TO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ ID WITH
##
## Ends in an error in state: 220.
##
## ident -> raw_ident . [ XOR TIMES SLASH SHARP RIGHTSQ RIGHTARROW QM_ID QM POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTSQ LEFTPAR LE IN HAT GT GE EQUAL DOT COMMA COLON BAR AT AND ]
## lexpr_or_dom -> raw_ident . MAPS_TO lexpr [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## raw_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID BAR XOR
##
## Ends in an error in state: 217.
##
## separated_nonempty_list(BAR,trigger) -> trigger BAR . separated_nonempty_list(BAR,trigger) [ RIGHTSQ ]
##
## The known suffix of the stack is as follows:
## trigger BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID COMMA XOR
##
## Ends in an error in state: 224.
##
## separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom COMMA . separated_nonempty_list(COMMA,lexpr_or_dom) [ RIGHTSQ BAR ]
##
## The known suffix of the stack is as follows:
## lexpr_or_dom COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN LEFTSQ QM_ID COMMA DECIMAL RIGHTSQ XOR
##
## Ends in an error in state: 223.
##
## separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom . [ RIGHTSQ BAR ]
## separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom . COMMA separated_nonempty_list(COMMA,lexpr_or_dom) [ RIGHTSQ BAR ]
##
## The known suffix of the stack is as follows:
## lexpr_or_dom
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN RIGHTSQ MINUS XOR
##
## Ends in an error in state: 233.
##
## bound -> MINUS . INTEGER [ RIGHTSQ LEFTSQ COMMA ]
## bound -> MINUS . DECIMAL [ RIGHTSQ LEFTSQ COMMA ]
## bound -> MINUS . HEXADECIMAL [ RIGHTSQ LEFTSQ COMMA ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN RIGHTSQ QM_ID COMMA QM_ID XOR
##
## Ends in an error in state: 243.
##
## lexpr_or_dom -> lexpr IN sq bound COMMA bound . sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr IN sq bound COMMA bound
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN RIGHTSQ QM_ID COMMA XOR
##
## Ends in an error in state: 242.
##
## lexpr_or_dom -> lexpr IN sq bound COMMA . bound sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr IN sq bound COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN RIGHTSQ QM_ID XOR
##
## Ends in an error in state: 241.
##
## lexpr_or_dom -> lexpr IN sq bound . COMMA bound sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr IN sq bound
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN RIGHTSQ XOR
##
## Ends in an error in state: 230.
##
## lexpr_or_dom -> lexpr IN sq . bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr IN sq
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID IN XOR
##
## Ends in an error in state: 227.
##
## lexpr_or_dom -> lexpr IN . sq bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID RIGHTSQ DISTINCT
##
## Ends in an error in state: 247.
##
## lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers . filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ VOID WITH
##
## Ends in an error in state: 226.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
## lexpr_or_dom -> lexpr . [ RIGHTSQ COMMA BAR ]
## lexpr_or_dom -> lexpr . IN sq bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON BOOL LEFTSQ XOR
##
## Ends in an error in state: 114.
##
## triggers -> LEFTSQ . separated_nonempty_list(BAR,trigger) RIGHTSQ [ LEFTBR DOT ]
##
## The known suffix of the stack is as follows:
## LEFTSQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON UNIT XOR
##
## Ends in an error in state: 112.
##
## multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) COLON primitive_type . [ LEFTSQ LEFTBR DOT COMMA ]
## primitive_type -> primitive_type . ident [ LEFTSQ LEFTBR ID DOT COMMA ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,named_ident) COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COLON XOR
##
## Ends in an error in state: 111.
##
## multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) COLON . primitive_type [ LEFTSQ LEFTBR DOT COMMA ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(COMMA,named_ident) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID COMMA XOR
##
## Ends in an error in state: 211.
##
## separated_nonempty_list(COMMA,named_ident) -> named_ident COMMA . separated_nonempty_list(COMMA,named_ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## named_ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL ID LEFTPAR
##
## Ends in an error in state: 210.
##
## separated_nonempty_list(COMMA,named_ident) -> named_ident . [ COLON ]
## separated_nonempty_list(COMMA,named_ident) -> named_ident . COMMA separated_nonempty_list(COMMA,named_ident) [ COLON ]
##
## The known suffix of the stack is as follows:
## named_ident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 108, spurious reduction of production raw_named_ident -> ID
## In state 209, spurious reduction of production named_ident -> raw_named_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON FORALL XOR
##
## Ends in an error in state: 107.
##
## lexpr -> FORALL . separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## FORALL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON ID LEFTPAR VOID COMMA XOR
##
## Ends in an error in state: 183.
##
## separated_nonempty_list(COMMA,lexpr) -> lexpr COMMA . separated_nonempty_list(COMMA,lexpr) [ RIGHTPAR RIGHTBR ]
##
## The known suffix of the stack is as follows:
## lexpr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON ID LEFTPAR VOID RIGHTBR
##
## Ends in an error in state: 146.
##
## simple_expr -> ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) . RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
## In state 148, spurious reduction of production separated_nonempty_list(COMMA,lexpr) -> lexpr
## In state 145, spurious reduction of production loption(separated_nonempty_list(COMMA,lexpr)) -> separated_nonempty_list(COMMA,lexpr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON ID LEFTPAR VOID WITH
##
## Ends in an error in state: 148.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## separated_nonempty_list(COMMA,lexpr) -> lexpr . [ RIGHTPAR RIGHTBR ]
## separated_nonempty_list(COMMA,lexpr) -> lexpr . COMMA separated_nonempty_list(COMMA,lexpr) [ RIGHTPAR RIGHTBR ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON ID LEFTPAR XOR
##
## Ends in an error in state: 144.
##
## simple_expr -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## ident LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON ID VOID
##
## Ends in an error in state: 143.
##
## simple_expr -> ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF VOID THEN VOID ELSE LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 255.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> IF lexpr THEN lexpr ELSE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF lexpr THEN lexpr ELSE lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF VOID THEN VOID ELSE XOR
##
## Ends in an error in state: 254.
##
## lexpr -> IF lexpr THEN lexpr ELSE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF lexpr THEN lexpr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF VOID THEN VOID WITH
##
## Ends in an error in state: 253.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
## lexpr -> IF lexpr THEN lexpr . ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF lexpr THEN lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF VOID THEN XOR
##
## Ends in an error in state: 252.
##
## lexpr -> IF lexpr THEN . lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF lexpr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF VOID WITH
##
## Ends in an error in state: 251.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> IF lexpr . THEN lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON IF XOR
##
## Ends in an error in state: 106.
##
## lexpr -> IF . lexpr THEN lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR ID EQUAL DECIMAL PV XOR
##
## Ends in an error in state: 102.
##
## separated_nonempty_list(PV,label_expr) -> label_expr PV . separated_nonempty_list(PV,label_expr) [ RIGHTBR ]
##
## The known suffix of the stack is as follows:
## label_expr PV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR ID EQUAL VOID WITH
##
## Ends in an error in state: 256.
##
## label_expr -> ident EQUAL lexpr . [ RIGHTBR PV ]
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
##
## The known suffix of the stack is as follows:
## ident EQUAL lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR ID EQUAL XOR
##
## Ends in an error in state: 105.
##
## label_expr -> ident EQUAL . lexpr [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR ID XOR
##
## Ends in an error in state: 259.
##
## label_expr -> ident . EQUAL lexpr [ RIGHTBR PV ]
## simple_expr -> ident . [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR VOID WITH ID XOR
##
## Ends in an error in state: 104.
##
## label_expr -> ident . EQUAL lexpr [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR VOID WITH XOR
##
## Ends in an error in state: 98.
##
## simple_expr -> LEFTBR simple_expr WITH . separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTBR simple_expr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR VOID XOR
##
## Ends in an error in state: 97.
##
## simple_expr -> LEFTBR simple_expr . WITH separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . DOT raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . LEFTSQ lexpr RIGHTSQ [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . COLON primitive_type [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . QM raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . QM_ID [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## simple_expr -> simple_expr . SHARP raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
##
## The known suffix of the stack is as follows:
## LEFTBR simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTBR XOR
##
## Ends in an error in state: 92.
##
## simple_expr -> LEFTBR . separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> LEFTBR . simple_expr WITH separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTBR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTPAR VOID WITH
##
## Ends in an error in state: 260.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## simple_expr -> LEFTPAR lexpr . RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTPAR lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTPAR XOR
##
## Ends in an error in state: 91.
##
## simple_expr -> LEFTPAR . lexpr RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTSQ BAR INTEGER BAR XOR
##
## Ends in an error in state: 89.
##
## lexpr -> LEFTSQ BAR INTEGER BAR . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTSQ BAR INTEGER BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTSQ BAR INTEGER XOR
##
## Ends in an error in state: 88.
##
## lexpr -> LEFTSQ BAR INTEGER . BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTSQ BAR INTEGER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTSQ BAR XOR
##
## Ends in an error in state: 87.
##
## lexpr -> LEFTSQ BAR . INTEGER BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTSQ BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LEFTSQ XOR
##
## Ends in an error in state: 86.
##
## lexpr -> LEFTSQ . BAR INTEGER BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LEFTSQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID EQUAL DECIMAL COMMA XOR
##
## Ends in an error in state: 264.
##
## separated_nonempty_list(COMMA,let_binder) -> let_binder COMMA . separated_nonempty_list(COMMA,let_binder) [ IN ]
##
## The known suffix of the stack is as follows:
## let_binder COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID EQUAL DECIMAL IN LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 262.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> LET separated_nonempty_list(COMMA,let_binder) IN lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LET separated_nonempty_list(COMMA,let_binder) IN lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID EQUAL DECIMAL IN XOR
##
## Ends in an error in state: 85.
##
## lexpr -> LET separated_nonempty_list(COMMA,let_binder) IN . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LET separated_nonempty_list(COMMA,let_binder) IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID EQUAL VOID WITH
##
## Ends in an error in state: 268.
##
## let_binder -> ident EQUAL lexpr . [ IN COMMA ]
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
##
## The known suffix of the stack is as follows:
## ident EQUAL lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID EQUAL XOR
##
## Ends in an error in state: 267.
##
## let_binder -> ident EQUAL . lexpr [ IN COMMA ]
##
## The known suffix of the stack is as follows:
## ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET ID XOR
##
## Ends in an error in state: 266.
##
## let_binder -> ident . EQUAL lexpr [ IN COMMA ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON LET XOR
##
## Ends in an error in state: 83.
##
## lexpr -> LET . separated_nonempty_list(COMMA,let_binder) IN lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID TYPE
##
## Ends in an error in state: 269.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> MATCH lexpr . WITH match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## MATCH lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH BAR XOR
##
## Ends in an error in state: 271.
##
## match_cases -> BAR . match_case [ END BAR ]
##
## The known suffix of the stack is as follows:
## BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID LEFTPAR ID COMMA XOR
##
## Ends in an error in state: 281.
##
## separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## ident COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID LEFTPAR ID RIGHTPAR XOR
##
## Ends in an error in state: 272.
##
## match_case -> simple_pattern . RIGHTARROW lexpr [ END BAR ]
##
## The known suffix of the stack is as follows:
## simple_pattern
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID LEFTPAR ID XOR
##
## Ends in an error in state: 280.
##
## separated_nonempty_list(COMMA,ident) -> ident . [ RIGHTPAR ]
## separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID LEFTPAR XOR
##
## Ends in an error in state: 277.
##
## simple_pattern -> ident LEFTPAR . separated_nonempty_list(COMMA,ident) RIGHTPAR [ RIGHTARROW ]
##
## The known suffix of the stack is as follows:
## ident LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID RIGHTARROW DECIMAL BAR XOR
##
## Ends in an error in state: 285.
##
## match_cases -> match_cases BAR . match_case [ END BAR ]
##
## The known suffix of the stack is as follows:
## match_cases BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID RIGHTARROW VOID WITH
##
## Ends in an error in state: 274.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
## match_case -> simple_pattern RIGHTARROW lexpr . [ END BAR ]
##
## The known suffix of the stack is as follows:
## simple_pattern RIGHTARROW lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID RIGHTARROW XOR
##
## Ends in an error in state: 273.
##
## match_case -> simple_pattern RIGHTARROW . lexpr [ END BAR ]
##
## The known suffix of the stack is as follows:
## simple_pattern RIGHTARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH ID XOR
##
## Ends in an error in state: 276.
##
## simple_pattern -> ident . [ RIGHTARROW ]
## simple_pattern -> ident . LEFTPAR separated_nonempty_list(COMMA,ident) RIGHTPAR [ RIGHTARROW ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH VOID WITH XOR
##
## Ends in an error in state: 270.
##
## lexpr -> MATCH lexpr WITH . match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## MATCH lexpr WITH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MATCH XOR
##
## Ends in an error in state: 82.
##
## lexpr -> MATCH . lexpr WITH match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## MATCH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON MINUS XOR
##
## Ends in an error in state: 81.
##
## lexpr -> MINUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON NOT XOR
##
## Ends in an error in state: 80.
##
## lexpr -> NOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## NOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON STRING COLON XOR
##
## Ends in an error in state: 79.
##
## lexpr -> STRING COLON . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## STRING COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON STRING XOR
##
## Ends in an error in state: 78.
##
## lexpr -> STRING . COLON lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID AND LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 180.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr AND lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr AND lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID AND XOR
##
## Ends in an error in state: 179.
##
## lexpr -> lexpr AND . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID AT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 162.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr AT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr AT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID AT XOR
##
## Ends in an error in state: 161.
##
## lexpr -> lexpr AT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr AT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID COLON UNIT VOID
##
## Ends in an error in state: 195.
##
## primitive_type -> primitive_type . ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr COLON primitive_type . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID COLON XOR
##
## Ends in an error in state: 194.
##
## simple_expr -> simple_expr COLON . primitive_type [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID DOT XOR
##
## Ends in an error in state: 192.
##
## simple_expr -> simple_expr DOT . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID EQUAL LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 178.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr EQUAL lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr EQUAL lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID EQUAL XOR
##
## Ends in an error in state: 177.
##
## lexpr -> lexpr EQUAL . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID GE LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 176.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr GE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr GE lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID GE XOR
##
## Ends in an error in state: 175.
##
## lexpr -> lexpr GE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID GT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 174.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr GT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr GT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID GT XOR
##
## Ends in an error in state: 173.
##
## lexpr -> lexpr GT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID HAT LEFTBR INTEGER COMMA INTEGER XOR
##
## Ends in an error in state: 141.
##
## lexpr -> lexpr HAT LEFTBR INTEGER COMMA INTEGER . RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr HAT LEFTBR INTEGER COMMA INTEGER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID HAT LEFTBR INTEGER COMMA XOR
##
## Ends in an error in state: 140.
##
## lexpr -> lexpr HAT LEFTBR INTEGER COMMA . INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr HAT LEFTBR INTEGER COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID HAT LEFTBR INTEGER XOR
##
## Ends in an error in state: 139.
##
## lexpr -> lexpr HAT LEFTBR INTEGER . COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr HAT LEFTBR INTEGER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID HAT LEFTBR XOR
##
## Ends in an error in state: 138.
##
## lexpr -> lexpr HAT LEFTBR . INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr HAT LEFTBR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID HAT XOR
##
## Ends in an error in state: 137.
##
## lexpr -> lexpr HAT . LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr HAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LE LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 172.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr LE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LE lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LE XOR
##
## Ends in an error in state: 171.
##
## lexpr -> lexpr LE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ VOID LEFTARROW DECIMAL COMMA VOID WITH
##
## Ends in an error in state: 191.
##
## array_assignment -> lexpr . LEFTARROW lexpr [ RIGHTSQ COMMA ]
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ VOID LEFTARROW DECIMAL COMMA XOR
##
## Ends in an error in state: 189.
##
## separated_nonempty_list(COMMA,array_assignment) -> array_assignment COMMA . separated_nonempty_list(COMMA,array_assignment) [ RIGHTSQ ]
##
## The known suffix of the stack is as follows:
## array_assignment COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ VOID LEFTARROW VOID WITH
##
## Ends in an error in state: 187.
##
## array_assignment -> lexpr LEFTARROW lexpr . [ RIGHTSQ COMMA ]
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LEFTARROW lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ VOID LEFTARROW XOR
##
## Ends in an error in state: 186.
##
## array_assignment -> lexpr LEFTARROW . lexpr [ RIGHTSQ COMMA ]
##
## The known suffix of the stack is as follows:
## lexpr LEFTARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ VOID WITH
##
## Ends in an error in state: 132.
##
## array_assignment -> lexpr . LEFTARROW lexpr [ RIGHTSQ COMMA ]
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## simple_expr -> simple_expr LEFTSQ lexpr . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr LEFTSQ lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LEFTSQ XOR
##
## Ends in an error in state: 129.
##
## simple_expr -> simple_expr LEFTSQ . lexpr RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr LEFTSQ . separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr LEFTSQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LRARROW LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 182.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr LRARROW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LRARROW lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LRARROW XOR
##
## Ends in an error in state: 181.
##
## lexpr -> lexpr LRARROW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LRARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 170.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr LT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID LT XOR
##
## Ends in an error in state: 169.
##
## lexpr -> lexpr LT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID MINUS LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 168.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr MINUS lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr MINUS lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID MINUS XOR
##
## Ends in an error in state: 167.
##
## lexpr -> lexpr MINUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID NOTEQ LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 166.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr NOTEQ lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr NOTEQ lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID NOTEQ XOR
##
## Ends in an error in state: 165.
##
## lexpr -> lexpr NOTEQ . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr NOTEQ
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID OR LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 164.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr OR lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr OR lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID OR XOR
##
## Ends in an error in state: 163.
##
## lexpr -> lexpr OR . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr OR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID PERCENT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 160.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr PERCENT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr PERCENT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID PERCENT XOR
##
## Ends in an error in state: 159.
##
## lexpr -> lexpr PERCENT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr PERCENT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID PLUS LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 158.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr PLUS lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr PLUS lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID PLUS XOR
##
## Ends in an error in state: 157.
##
## lexpr -> lexpr PLUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID POW LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 156.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr POW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr POW lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID POW XOR
##
## Ends in an error in state: 155.
##
## lexpr -> lexpr POW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr POW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID POWDOT LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 154.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr POWDOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr POWDOT lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID POWDOT XOR
##
## Ends in an error in state: 153.
##
## lexpr -> lexpr POWDOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr POWDOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID PV XOR
##
## Ends in an error in state: 305.
##
## rewriting_list -> lexpr PV . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## rewriting_list -> lexpr PV . rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## lexpr PV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID QM XOR
##
## Ends in an error in state: 127.
##
## simple_expr -> simple_expr QM . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr QM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID RIGHTARROW LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 152.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr RIGHTARROW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr RIGHTARROW lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID RIGHTARROW XOR
##
## Ends in an error in state: 151.
##
## lexpr -> lexpr RIGHTARROW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr RIGHTARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID SHARP XOR
##
## Ends in an error in state: 124.
##
## simple_expr -> simple_expr SHARP . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr SHARP
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID SLASH LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 150.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr SLASH lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr SLASH lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID SLASH XOR
##
## Ends in an error in state: 149.
##
## lexpr -> lexpr SLASH . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr SLASH
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID TIMES LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 136.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr TIMES lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr TIMES lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID TIMES XOR
##
## Ends in an error in state: 135.
##
## lexpr -> lexpr TIMES . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID VOID
##
## Ends in an error in state: 123.
##
## lexpr -> simple_expr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . DOT raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . LEFTSQ lexpr RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . COLON primitive_type [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . QM raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . QM_ID [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## simple_expr -> simple_expr . SHARP raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID WITH
##
## Ends in an error in state: 304.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## rewriting_list -> lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## rewriting_list -> lexpr . PV [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## rewriting_list -> lexpr . PV rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID XOR LEFTSQ BAR INTEGER BAR RIGHTSQ VOID
##
## Ends in an error in state: 134.
##
## lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr XOR lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr XOR lexpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON VOID XOR XOR
##
## Ends in an error in state: 133.
##
## lexpr -> lexpr XOR . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## lexpr XOR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID COLON XOR
##
## Ends in an error in state: 302.
##
## decl -> REWRITING decl_ident COLON . rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## REWRITING decl_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING ID XOR
##
## Ends in an error in state: 301.
##
## decl -> REWRITING decl_ident . COLON rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## REWRITING decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: REWRITING XOR
##
## Ends in an error in state: 300.
##
## decl -> REWRITING . decl_ident COLON rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## REWRITING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL AXIOM ID COLON VOID WITH
##
## Ends in an error in state: 295.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## theory_elt -> AXIOM decl_ident COLON lexpr . [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident COLON lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL AXIOM ID COLON XOR
##
## Ends in an error in state: 294.
##
## theory_elt -> AXIOM decl_ident COLON . lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL AXIOM ID XOR
##
## Ends in an error in state: 293.
##
## theory_elt -> AXIOM decl_ident . COLON lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL AXIOM XOR
##
## Ends in an error in state: 292.
##
## theory_elt -> AXIOM . decl_ident COLON lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## AXIOM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL CASESPLIT ID COLON VOID WITH
##
## Ends in an error in state: 291.
##
## lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
## theory_elt -> CASESPLIT decl_ident COLON lexpr . [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## CASESPLIT decl_ident COLON lexpr
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 123, spurious reduction of production lexpr -> simple_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL CASESPLIT ID COLON XOR
##
## Ends in an error in state: 75.
##
## theory_elt -> CASESPLIT decl_ident COLON . lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## CASESPLIT decl_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL CASESPLIT ID XOR
##
## Ends in an error in state: 74.
##
## theory_elt -> CASESPLIT decl_ident . COLON lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## CASESPLIT decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL CASESPLIT XOR
##
## Ends in an error in state: 73.
##
## theory_elt -> CASESPLIT . decl_ident COLON lexpr [ END CASESPLIT AXIOM ]
##
## The known suffix of the stack is as follows:
## CASESPLIT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID EQUAL XOR
##
## Ends in an error in state: 72.
##
## decl -> THEORY decl_ident EXTENDS decl_ident EQUAL . list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## THEORY decl_ident EXTENDS decl_ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS ID XOR
##
## Ends in an error in state: 71.
##
## decl -> THEORY decl_ident EXTENDS decl_ident . EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## THEORY decl_ident EXTENDS decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID EXTENDS XOR
##
## Ends in an error in state: 70.
##
## decl -> THEORY decl_ident EXTENDS . decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## THEORY decl_ident EXTENDS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY ID XOR
##
## Ends in an error in state: 69.
##
## decl -> THEORY decl_ident . EXTENDS decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## THEORY decl_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: THEORY XOR
##
## Ends in an error in state: 67.
##
## decl -> THEORY . decl_ident EXTENDS decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## THEORY
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID AND ID EQUAL XOR
##
## Ends in an error in state: 65.
##
## algebraic_typedef -> type_vars raw_ident EQUAL . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
##
## The known suffix of the stack is as follows:
## type_vars raw_ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID AND ID XOR
##
## Ends in an error in state: 64.
##
## algebraic_typedef -> type_vars raw_ident . EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
##
## The known suffix of the stack is as follows:
## type_vars raw_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID AND QUOTE ID HEXADECIMAL
##
## Ends in an error in state: 63.
##
## algebraic_typedef -> type_vars . raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
##
## The known suffix of the stack is as follows:
## type_vars
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID AND XOR
##
## Ends in an error in state: 62.
##
## separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef AND . separated_nonempty_list(AND,algebraic_typedef) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## algebraic_typedef AND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID BAR XOR
##
## Ends in an error in state: 57.
##
## separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor BAR . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
##
## The known suffix of the stack is as follows:
## algebraic_constructor BAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR ID COLON BOOL PV XOR
##
## Ends in an error in state: 53.
##
## separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type PV . separated_nonempty_list(PV,algebraic_label_with_type) [ RIGHTBR ]
##
## The known suffix of the stack is as follows:
## algebraic_label_with_type PV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR ID COLON BOOL RIGHTBR XOR
##
## Ends in an error in state: 56.
##
## separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor . BAR separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
##
## The known suffix of the stack is as follows:
## algebraic_constructor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR ID COLON UNIT XOR
##
## Ends in an error in state: 51.
##
## algebraic_label_with_type -> ident COLON primitive_type . [ RIGHTBR PV ]
## primitive_type -> primitive_type . ident [ RIGHTBR PV ID ]
##
## The known suffix of the stack is as follows:
## ident COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR ID COLON XOR
##
## Ends in an error in state: 50.
##
## algebraic_label_with_type -> ident COLON . primitive_type [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR ID XOR
##
## Ends in an error in state: 49.
##
## algebraic_label_with_type -> ident . COLON primitive_type [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF LEFTBR XOR
##
## Ends in an error in state: 46.
##
## algebraic_args -> OF LEFTBR . separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
##
## The known suffix of the stack is as follows:
## OF LEFTBR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID OF XOR
##
## Ends in an error in state: 45.
##
## algebraic_args -> OF . LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
##
## The known suffix of the stack is as follows:
## OF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL ID XOR
##
## Ends in an error in state: 44.
##
## algebraic_constructor -> raw_ident . algebraic_args [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
##
## The known suffix of the stack is as follows:
## raw_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL LEFTBR ID COLON BOOL PV XOR
##
## Ends in an error in state: 18.
##
## separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type PV . separated_nonempty_list(PV,record_label_with_type) [ RIGHTBR ]
##
## The known suffix of the stack is as follows:
## record_label_with_type PV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL LEFTBR ID COLON UNIT XOR
##
## Ends in an error in state: 41.
##
## primitive_type -> primitive_type . ident [ RIGHTBR PV ID ]
## record_label_with_type -> raw_ident COLON primitive_type . [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## raw_ident COLON primitive_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL LEFTBR ID COLON XOR
##
## Ends in an error in state: 21.
##
## record_label_with_type -> raw_ident COLON . primitive_type [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## raw_ident COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL LEFTBR ID XOR
##
## Ends in an error in state: 20.
##
## record_label_with_type -> raw_ident . COLON primitive_type [ RIGHTBR PV ]
##
## The known suffix of the stack is as follows:
## raw_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL LEFTBR XOR
##
## Ends in an error in state: 14.
##
## record_type -> LEFTBR . separated_nonempty_list(PV,record_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## LEFTBR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID EQUAL XOR
##
## Ends in an error in state: 13.
##
## algebraic_typedef -> type_vars raw_ident EQUAL . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## decl -> TYPE type_vars raw_ident EQUAL . record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## TYPE type_vars raw_ident EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE ID XOR
##
## Ends in an error in state: 12.
##
## algebraic_typedef -> type_vars raw_ident . EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## decl -> TYPE type_vars raw_ident . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> TYPE type_vars raw_ident . EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## TYPE type_vars raw_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE LEFTPAR QUOTE ID COMMA XOR
##
## Ends in an error in state: 6.
##
## separated_nonempty_list(COMMA,type_var) -> type_var COMMA . separated_nonempty_list(COMMA,type_var) [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## type_var COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE LEFTPAR QUOTE ID XOR
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(COMMA,type_var) -> type_var . [ RIGHTPAR ]
## separated_nonempty_list(COMMA,type_var) -> type_var . COMMA separated_nonempty_list(COMMA,type_var) [ RIGHTPAR ]
##
## The known suffix of the stack is as follows:
## type_var
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE LEFTPAR XOR
##
## Ends in an error in state: 4.
##
## type_vars -> LEFTPAR . separated_nonempty_list(COMMA,type_var) RIGHTPAR [ ID ]
##
## The known suffix of the stack is as follows:
## LEFTPAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE QUOTE ID HEXADECIMAL
##
## Ends in an error in state: 10.
##
## algebraic_typedef -> type_vars . raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## decl -> TYPE type_vars . raw_ident [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> TYPE type_vars . raw_ident EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## TYPE type_vars
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE QUOTE XOR
##
## Ends in an error in state: 2.
##
## type_var -> QUOTE . ID [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
##
## The known suffix of the stack is as follows:
## QUOTE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: TYPE XOR
##
## Ends in an error in state: 1.
##
## decl -> TYPE . type_vars raw_ident [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> TYPE . separated_nonempty_list(AND,algebraic_typedef) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## decl -> TYPE . type_vars raw_ident EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
##
## The known suffix of the stack is as follows:
## TYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

file: XOR
##
## Ends in an error in state: 0.
##
## file' -> . file [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

