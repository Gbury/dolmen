
(ocamllex (modules lexZf))

(menhir
 (flags (--only-tokens))
 (modules tokens_zf)
)

(menhir
 (flags (--explain --table --external-tokens Tokens_zf))
 (modules tokens_zf parseZf)
 (merge_into parseZf)
)

(rule
  (target syntax_messages.ml)
  (deps   (:tokens tokens_zf.mly)
          (:parser parseZf.mly)
          (:msg syntax.messages))
  (action (with-stdout-to %{target}
          (run menhir --external-tokens Tokens_zf %{tokens}
                      %{parser} --base %{parser} --compile-errors %{msg})))
)

(library
  (name           dolmen_zf)
  (public_name    dolmen.zf)
  (instrumentation (backend bisect_ppx))
  (libraries      dolmen_std dolmen_intf menhirLib)
  (modules        Tokens_zf LexZf ParseZf Ast_zf Syntax_messages Dolmen_zf)
)

; Convenience rule to generate a fresh messages file,
; and update an already existing one.
(rule
  (target new.messages)
  (mode   promote-until-clean)
  (deps   (:tokens tokens_zf.mly)
          (:parser parseZf.mly))
  (action (with-stdout-to %{target}
          (run menhir --external-tokens Tokens_zf %{tokens}
                      %{parser} --base %{parser} --list-errors)))
)

(rule
  (target updated.messages)
  (deps   (:tokens tokens_zf.mly)
          (:parser parseZf.mly)
          (:msg syntax.messages))
  (action (with-stdout-to %{target}
          (run menhir --external-tokens Tokens_zf %{tokens}
                      %{parser} --base %{parser} --update-errors %{msg})))
)

; Additional rule to add to runtest a check that the messages file is up-to-date
(rule
  (alias runtest)
  (deps   (:tokens tokens_zf.mly)
          (:parser parseZf.mly)
          (:new new.messages)
          (:msg syntax.messages))
  (action (run menhir --external-tokens Tokens_zf %{tokens}
                      %{parser} --base %{parser} --compare-errors %{new} --compare-errors %{msg}))
)

(rule
  (alias runtest)
  (deps syntax.messages updated.messages)
  (action (diff syntax.messages updated.messages))
)
